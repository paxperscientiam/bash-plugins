#!/usr/bin/env bash

#reset/define

function checkHtaccess() {
  local replacement_htaccess

  printf 'local htaccess: %s\n\n' "${local_htaccess:?}"
  printf 'remote htaccess: %s\n\n' "${remote_htaccess:?}"
  printf 'maintenance htaccess (local): %s\n\n' "${maintain_htaccess:?}"

  if [[ "${1}" == '-d' ]]; then
    replacement_htaccess="${maintain_htaccess}"
  elif [[ "${1}" == '-u' ]]; then
    replacement_htaccess="${local_htaccess}"
  fi

  if [[ ! -f "${local_htaccess}" ]]; then
    printf 'The local file %s was not found!\n\n' "${local_htaccess}"
    exit 1
  else
    printf 'Found local file %s !\n\n' "${local_htaccess}"
  fi

  if ssh pax "command ls ${remote_htaccess}" >/dev/null 2>&1
  then
    printf 'Found local file %s !\n\n' "${remote_htaccess}"
  else
    printf 'The remote file %s was not found!\n\n' "${remote_htaccess}"
  fi

  target="${sshuser:?}@${domain:?}:${remoteroot:?}"
  scp "${replacement_htaccess}" "${target}/${remote_htaccess}" &
  printf 'Copying ".maintenance.htaccess" to here: %s\n\n' "${target}/${remote_htaccess}"
  wait
  printf 'done.\n\n'
}


function sync-site() {
  sshuser=
  localroot=
  remoteroot=
  domain=
  sources=
  BLACKLIST=
  PROTECTLIST=

  status=

  _PWD=$(pwd)
  _RC="${_PWD}/creds.txt"
  _BUILD_STATUS="${_PWD}/.build-status"

  if [[ -f "${_RC}" ]]; then
    printf 'Creds file found.\n\n'
    source "${_RC}"
    if [[ "${?}" -ne 0 ]]; then
      printf '%s\n' "Fix syntax of CREDS file."
      return $?
    fi

  else
    printf 'A creds file is required and was not found!\n'
    exit 1
  fi

  arr=('sshuser' 'localroot' 'remoteroot' 'domain')
  for i in "${arr[@]}"
  do
    val="${!i}"
    if [[ ! -n "${val}" || "${#val}" -eq 0 ]]; then
      printf '%s:\n NOT SET\n' "${i}"
      status=1
    else
      printf '%s:\n %s\n' "${i}" "${!i}"
    fi
  done
  printf '\n\n'


  if [[ "${1}" =~ (-d|--down) ]];
  then
    checkHtaccess '-d'
    return 0
  elif [[ "${1}" =~ (-u|--up) ]];
  then
    checkHtaccess '-u'
    return 0
  else
    :
  fi

  [[ "${status}" -eq 1 ]] && exit 1

  # if [[ -f "${_BUILD_STATUS}" ]]; then
  #   printf 'Found build-status file.\n\n'
  #   source "${_BUILD_STATUS}"
  #   if [[ "${?}" -ne 0 ]]; then
  #     printf '%s\n' "Fix syntax of build-status file."
  #     status=1
  #   fi

  # else
  #   printf 'A build-status file is needed and was not found!\n'
  #   exit 1
  # fi

  [[ "${status}" -eq 1 ]] && exit 1

  # if ! [[ "${BS}" =~ ^(production|dist)$ ]]; then
  #   printf 'The build status is \"%s\", so cannot be synced.\n' "${BS}"
  #   exit 1 ;
  # else
  #   printf 'The build status is \"%s\", syncing will commence.\n' "${BS}"
  # fi

  function sync () {
    target="${sshuser:?}@${domain:?}:${remoteroot:?}"

    printf 'Current target:\n %s\n\n' "${target}"

    # sleep 2

    # if [ "${#sources[*]}" -eq 0 ];then
    #   printf 'rsync source (`sources` variable) not defined...exiting\n'
    #   exit 1
    # fi
    # dont prune empty directories! --prune-empty-dirs
    rsync -e '/usr/bin/ssh -T -x' \
          "${@}" \
          --compress \
          --protect-args \
          --delete \
          --exclude-from <(printf '%s\n' "${BLACKLIST[@]}") \
          --filter='merge '<(printf '%s\n' "${PROTECTLIST[@]}") \
          --delete-excluded \
          --archive \
          --progress \
          --times \
          --copy-links \
          --verbose \
          "${HOME}/.bashrc" \
          "${HOME}/.bash_profile" \
          "${HOME}/.emacs.d/moose" \
	  "${HOME}/.emacs.d/init.el" \
	  "${HOME}/.emacs.d/custom.el" \
          "${localroot}" \
          "${target}"
  }


  function phpCgiRestart() {
    if [ -v PHPCGI ] && [ ! ${#PHPCGI} -eq 0 ]; then
      printf 'Attempting to reset %s ... ' "${PHPCGI}"
      cmd="killall -USR2 ${PHPCGI}"
      /usr/bin/ssh -T "${sshuser:?}@${domain:?}" "${cmd}" &
      wait
      printf 'done. (%s)\n' "${?}"
    fi
  }


  # so this is causing issues, I should only attempt to reset if running. Otherwise, i need to wait for it restart before i can login again ... i think
  [[ $1 = '-p' ]] && phpCgiRestart
  #[[ ! $1 = '-n' ]] && phpCgiRestart
  sync "$@"
}


if [[ ${BASH_SOURCE[0]} != $0 ]]; then
  export -f sync-site
else
  sync-site "${@}"
  exit $?
fi
